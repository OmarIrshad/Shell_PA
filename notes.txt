multiple arguments 

Command Pipelining- output of one command becomes input of next command
	use command vector to create pipelining
	refer to lab3a unnamed pipes, pipe()/dup(),dup2()

output redirection- change stdout to file
    open the file for writing as a file descriptor
	use dup2() to redirect stdout (1) from ^ fd
input redirection - change stdin from file 
	open the file for reading as a file descriptor
	use dup2() to redirect stdin (0) from ^ fd

I/O redirection can be together

file for redirection are stored in the Command class 

handle commands that run in the background 
    return the user prompt to user control until command is done
    use command->isBackground()
    store pid from fork() in a vector of background processes 
    before prompting user, iterate ovver vector to reap processes (no zombie processes)
    make waitpid() non-blocking for background processes 

cd (change directory) use chdir()
    cd -: keep track of previous directory 
    use getcwd()

user prompt - date/time, user name, abs path of cwd
    getlogin() and getcwd()
